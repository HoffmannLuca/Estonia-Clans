
name: Java Spring CI with Gradle to Docker Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      DOCKER_TARGET_PLATFORM: linux/amd64,linux/arm/v7
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST_IP: ${{ secrets.DB_HOST_IP }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE_NAME: ${{ secrets.DB_DATABASE_NAME }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare
        if: success()
        id: prepare
        run: |
          echo ::set-output name=branch::ESTONIA_CLANS_BOT-master
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
          echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}
          echo ::set-output name=version::${GITHUB_RUN_NUMBER}
          echo ::set-output name=bot_token::${BOT_TOKEN}
          echo ::set-output name=db_username::${DB_USERNAME}
          echo ::set-output name=db_password::${DB_PASSWORD}
          echo ::set-output name=db_host_ip::${DB_HOST_IP}
          echo ::set-output name=db_port::${DB_PORT}
          echo ::set-output name=db_database_name::${DB_DATABASE_NAME}

      - name: Docker Login
        if: success()
        run: |
          echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin

      - name: Run Buildx (push image)
        if: success()
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platform }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:"${{ steps.prepare.outputs.version }}-${{ steps.prepare.outputs.branch }}" \
          --build-arg BOT_TOKEN_ARG=${{ steps.prepare.outputs.bot_token }} \
          --build-arg DB_USERNAME_ARG="${{ steps.prepare.outputs.db_username }}" \
          --build-arg DB_PASSWORD_ARG="${{ steps.prepare.outputs.db_password }}" \
          --build-arg DB_HOST_IP_ARG="${{ steps.prepare.outputs.db_host_ip }}" \
          --build-arg DB_PORT_ARG="${{ steps.prepare.outputs.db_port }}" \
          --build-arg DB_DATABASE_NAME_ARG="${{ steps.prepare.outputs.db_database_name }}" \
          --file ./Dockerfile \
          --output type=image,push=true .
